service: marvel-ai-fetch-events
frameworkVersion: '3'

plugins:
  - serverless-dotenv-plugin
  - serverless-plugin-typescript

custom:
  dotenv:
    path: .env

  caravarvelImagesbucket: caravarvel-images-bucket

provider:
  name: aws
  runtime: nodejs18.x
  region: eu-west-2
  iam:
    role:
      statements:
      - Effect: Allow
        Action:
          - dynamodb:*
        Resource:
          - arn:aws:dynamodb:${self:provider.region}:${aws:accountId}:table/MarvelEvents
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:custom.caravarvelImagesbucket}/*

package: 
  individually: true

functions:

  fetchStories:
    handler: src/fetchStories.handler
    timeout: 20
          
  fetchUnused:
    handler: src/fetchUnused.handler
    timeout: 30
    events:
      - schedule:
          rate: cron(0 10 * * ? *)
          enabled: true
    environment:
      BUCKET: ${self:custom.caravarvelImagesbucket}

resources:
  Resources:
    MarvelEventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: MarvelEvents
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH

    CommentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: Comments
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: eventId
            AttributeType: N
          - AttributeName: commentId
            AttributeType: S
          - AttributeName: dateUpdated
            AttributeType: S
        KeySchema:
          - AttributeName: eventId
            KeyType: HASH
          - AttributeName: commentId
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: EventDateIndex
            KeySchema:
              - AttributeName: eventId
                KeyType: HASH
              - AttributeName: dateUpdated
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    CaravarvelImagesbucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.caravarvelImagesbucket}
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          IgnorePublicAcls: false
          BlockPublicPolicy: false
          RestrictPublicBuckets: false

    CaravarvelImagesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref CaravarvelImagesbucket
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "Statement1"
              Effect: "Allow"
              Principal: "*"
              Action: "s3:GetObject"
              Resource: !Sub "arn:aws:s3:::${self:custom.caravarvelImagesbucket}/*"
